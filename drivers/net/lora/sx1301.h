/* SPDX-License-Identifier: GPL-2.0-or-later */
/* Semtech SX1301 LoRa concentrator
 *
 * Copyright (c) 2018   Ben Whitten
 * Copyright (c) 2018 Andreas FÃ¤rber
 */

#ifndef _SX1301_
#define _SX1301_

#include <linux/clk.h>
#include <linux/regmap.h>
#include <linux/gpio/consumer.h>
#include <linux/lora/dev.h>

#define SX1301_CHIP_VERSION 103

#define SX1301_MCU_FW_BYTE 8192
#define SX1301_MCU_ARB_FW_VERSION 1
#define SX1301_MCU_AGC_FW_VERSION 4
#define SX1301_MCU_AGC_CAL_FW_VERSION 2

#define SX1301_AGC_CMD_WAIT 16
#define SX1301_AGC_CMD_ABORT 17

#define SX1301_TX_GAIN_LUT_MAX 16

/* Calibrated value for 500KHz BW and notch filter disabled */
#define TX_START_DELAY_DEFAULT  1497

/* Page independent */
#define SX1301_PAGE     0x00
#define SX1301_VER      0x01
#define SX1301_RX_DATA_BUF_ADDR 0x02 /* 16 wide */
#define SX1301_RX_DATA_BUF_DATA 0x04
#define SX1301_TX_DATA_BUF_ADDR 0x05
#define SX1301_TX_DATA_BUF_DATA 0x06
#define SX1301_MPA      0x09
#define SX1301_MPD      0x0A
#define SX1301_GEN      0x10
#define SX1301_CKEN     0x11
#define SX1301_GPSO     0x1C
#define SX1301_GPMODE   0x1D
#define SX1301_AGCSTS   0x20

#define SX1301_VIRT_BASE    0x100
#define SX1301_PAGE_LEN     0x80
#define SX1301_PAGE_BASE(n) (SX1301_VIRT_BASE + (SX1301_PAGE_LEN * (n)))

/* Page 0 */
#define SX1301_IQCFG        (SX1301_PAGE_BASE(0) + 0x21)
#define SX1301_CHRS         (SX1301_PAGE_BASE(0) + 0x23)
#define SX1301_CORR_CFG     (SX1301_PAGE_BASE(0) + 0x4E)
#define SX1301_MODEM_START_RDX4L (SX1301_PAGE_BASE(0) + 0x51)
#define SX1301_MODEM_START_RDX4H (SX1301_PAGE_BASE(0) + 0x52)
#define SX1301_MODEM_START_SF12_RDX4L (SX1301_PAGE_BASE(0) + 0x53)
#define SX1301_MODEM_START_SF12_RDX4H (SX1301_PAGE_BASE(0) + 0x54)
#define SX1301_FRAME_SYNCH  (SX1301_PAGE_BASE(0) + 0x5F)
#define SX1301_MISC_CFG1    (SX1301_PAGE_BASE(0) + 0x63)
#define SX1301_GAIN_OFFSET  (SX1301_PAGE_BASE(0) + 0x68)
#define SX1301_FORCE_CTRL   (SX1301_PAGE_BASE(0) + 0x69)
#define SX1301_MCU_CTRL     (SX1301_PAGE_BASE(0) + 0x6A)
#define SX1301_RSSI_BB_DEFAULT_VALUE 	(SX1301_PAGE_BASE(0) + 0x6C)
#define SX1301_RSSI_DEC_DEFAULT_VALUE 	(SX1301_PAGE_BASE(0) + 0x6D)
#define SX1301_RSSI_CHANN_DEFAULT_VALUE (SX1301_PAGE_BASE(0) + 0x6E)
#define SX1301_RSSI_BB_FILTER_ALPHA 	(SX1301_PAGE_BASE(0) + 0x6F)
#define SX1301_RSSI_DEC_FILTER_ALPHA 	(SX1301_PAGE_BASE(0) + 0x70)
#define SX1301_RSSI_CHANN_FILTER_ALPHA 	(SX1301_PAGE_BASE(0) + 0x71)

/* Page 1 */
#define SX1301_TX_TRIG      (SX1301_PAGE_BASE(1) + 0x21)
#define SX1301_TX_START_DELAYL      (SX1301_PAGE_BASE(1) + 0x22)
#define SX1301_TX_START_DELAYH      (SX1301_PAGE_BASE(1) + 0x23)
#define SX1301_TX_FRAME_SYNCH       (SX1301_PAGE_BASE(1) + 0x24)
#define SX1301_TX_CFG2              (SX1301_PAGE_BASE(1) + 0x2A)
#define SX1301_BHSYNCPOS            (SX1301_PAGE_BASE(1) + 0x2E)
#define SX1301_FSK_CFG1             (SX1301_PAGE_BASE(1) + 0x3F)
#define SX1301_FSK_CFG2             (SX1301_PAGE_BASE(1) + 0x40)
#define SX1301_FSK_ERROR_OSR_TOL    (SX1301_PAGE_BASE(1) + 0x41)
#define SX1301_FSK_PKT_LENGTH       (SX1301_PAGE_BASE(1) + 0x4C)
#define SX1301_FSK_TX               (SX1301_PAGE_BASE(1) + 0x4D)
#define SX1301_FSK_PATTERN_TIMEOUT_CFGL (SX1301_PAGE_BASE(1) + 0x53)
#define SX1301_FSK_PATTERN_TIMEOUT_CFGH (SX1301_PAGE_BASE(1) + 0x54)

/* Page 2 */
#define SX1301_RADIO_A_SPI_DATA     (SX1301_PAGE_BASE(2) + 0x21)
#define SX1301_RADIO_A_SPI_DATA_RB  (SX1301_PAGE_BASE(2) + 0x22)
#define SX1301_RADIO_A_SPI_ADDR     (SX1301_PAGE_BASE(2) + 0x23)
#define SX1301_RADIO_A_SPI_CS       (SX1301_PAGE_BASE(2) + 0x25)
#define SX1301_RADIO_B_SPI_DATA     (SX1301_PAGE_BASE(2) + 0x26)
#define SX1301_RADIO_B_SPI_DATA_RB  (SX1301_PAGE_BASE(2) + 0x27)
#define SX1301_RADIO_B_SPI_ADDR     (SX1301_PAGE_BASE(2) + 0x28)
#define SX1301_RADIO_B_SPI_CS       (SX1301_PAGE_BASE(2) + 0x2A)
#define SX1301_RADIO_CFG            (SX1301_PAGE_BASE(2) + 0x2B)
#define SX1301_DBG_ARB_MCU_RAM_DATA (SX1301_PAGE_BASE(2) + 0x40)
#define SX1301_DBG_AGC_MCU_RAM_DATA (SX1301_PAGE_BASE(2) + 0x41)
#define SX1301_DBG_ARB_MCU_RAM_ADDR (SX1301_PAGE_BASE(2) + 0x50)
#define SX1301_DBG_AGC_MCU_RAM_ADDR (SX1301_PAGE_BASE(2) + 0x51)

/* Page 3 */
#define SX1301_EMERGENCY_FORCE_HOST_CTRL (SX1301_PAGE_BASE(3) + 0x7F)

#define SX1301_MAX_REGISTER         (SX1301_PAGE_BASE(3) + 0x7F)

enum sx1301_fields {
	F_SOFT_RESET,
	F_GLOBAL_EN,
	F_CLK32M_EN,
	F_RADIO_A_EN,
	F_RADIO_B_EN,
	F_RADIO_RST,

	F_MCU_RST_0,
	F_MCU_RST_1,
	F_MCU_SELECT_MUX_0,
	F_MCU_SELECT_MUX_1,

	F_FORCE_HOST_RADIO_CTRL,
	F_FORCE_HOST_FE_CTRL,
	F_FORCE_DEC_FILTER_GAIN,

	F_EMERGENCY_FORCE_HOST_CTRL,

	F_RSSI_BB_FILTER_ALPHA,
	F_RSSI_DEC_FILTER_ALPHA,
	F_RSSI_CHANN_FILTER_ALPHA,

	F_RSSI_BB_DEFAULT_VALUE,
	F_RSSI_DEC_DEFAULT_VALUE,
	F_RSSI_CHANN_DEFAULT_VALUE,

	F_DEC_GAIN_OFFSET,
	F_CHAN_GAIN_OFFSET,

	F_TX_TRIG_IMMEDIATE,
	F_TX_TRIG_DELAYED,
	F_TX_TRIG_GPS,

	F_SNR_AVG_CST,
	F_FRAME_SYNCH_PEAK1_POS,
	F_FRAME_SYNCH_PEAK2_POS,

	F_MBWSSF_FRAME_SYNCH_PEAK1_POS,
	F_MBWSSF_FRAME_SYNCH_PEAK2_POS,

	F_ADJUST_MODEM_START_OFFSET_RDX4L,
	F_ADJUST_MODEM_START_OFFSET_RDX4H,
	F_ADJUST_MODEM_START_OFFSET_SF12_RDX4L,
	F_ADJUST_MODEM_START_OFFSET_SF12_RDX4H,
	F_CORR_MAC_GAIN,

	F_FSK_RX_INVERT,
	F_FSK_MODEM_INVERT_IQ,

	F_FSK_RSSI_LENGTH,
	F_FSK_PKT_MODE,
	F_FSK_CRC_EN,
	F_FSK_DCFREE_ENC,
	F_FSK_ERROR_OSR_TOL,
	F_FSK_PKT_LENGTH,
	F_FSK_PATTERN_TIMEOUT_CFGL,
	F_FSK_PATTERN_TIMEOUT_CFGH,

	F_TX_START_DELAYL,
	F_TX_START_DELAYH,

	F_TX_SWAP_IQ,
	F_TX_FRAME_SYNCH_PEAK1_POS,
	F_TX_FRAME_SYNCH_PEAK2_POS,

	F_FSK_TX_GAUSSIAN_SELECT_BT,
};

struct sx1301_fields_sequence {
	enum sx1301_fields field;
	u8 val;
};

static const struct sx1301_fields_sequence sx1301_regmap_fields_patch[] = {
	/* I/Q path setup */
	{F_RSSI_BB_FILTER_ALPHA,	6},
	{F_RSSI_DEC_FILTER_ALPHA,	7},
	{F_RSSI_CHANN_FILTER_ALPHA,	7},
	{F_RSSI_BB_DEFAULT_VALUE,	23},
	{F_RSSI_DEC_DEFAULT_VALUE,	85},
	{F_RSSI_CHANN_DEFAULT_VALUE,	66},
	{F_DEC_GAIN_OFFSET,		7},
	{F_CHAN_GAIN_OFFSET,		6},

	/* LoRa 'multi' demodulator setup */
	{F_SNR_AVG_CST,			3},
	{F_FRAME_SYNCH_PEAK1_POS,	3}, // Public LoRa network
	{F_FRAME_SYNCH_PEAK2_POS,	4}, // Public LoRa network

	/* LoRa standalone 'MBWSSF' demodulator setup */
	{F_MBWSSF_FRAME_SYNCH_PEAK1_POS, 3}, // Public LoRa network
	{F_MBWSSF_FRAME_SYNCH_PEAK2_POS, 4}, // Public LoRa network

	/* Improvement of ref clock freq error tolerance */
	{F_ADJUST_MODEM_START_OFFSET_RDX4L, 1},
	{F_ADJUST_MODEM_START_OFFSET_SF12_RDX4L, (4094 & 0xFF)},
	{F_ADJUST_MODEM_START_OFFSET_SF12_RDX4H, (4094 >> 8)},
	{F_CORR_MAC_GAIN,		7},

	/* FSK datapath setup */
	{F_FSK_RX_INVERT,		1},
	{F_FSK_MODEM_INVERT_IQ,		1},

	/* FSK demodulator setup */
	{F_FSK_RSSI_LENGTH,		4},
	{F_FSK_PKT_MODE,		1},
	{F_FSK_CRC_EN,			1},
	{F_FSK_DCFREE_ENC,		2},
	{F_FSK_ERROR_OSR_TOL,		10},
	{F_FSK_PKT_LENGTH,		255},
	{F_FSK_PATTERN_TIMEOUT_CFGL,	128},

	/* TX general parameters */
	{F_TX_START_DELAYL, (TX_START_DELAY_DEFAULT & 0xFF)},
	{F_TX_START_DELAYH, (TX_START_DELAY_DEFAULT >> 8)},

	/* TX LoRa */
	{F_TX_SWAP_IQ,			1},
	{F_TX_FRAME_SYNCH_PEAK1_POS,	3}, // Public LoRa network
	{F_TX_FRAME_SYNCH_PEAK2_POS,	4}, // Public LoRa network

	/* TX FSK */
	{F_FSK_TX_GAUSSIAN_SELECT_BT,	2},
};

static const struct reg_field sx1301_regmap_fields[] = {
	/* PAGE */
	[F_SOFT_RESET]          = REG_FIELD(SX1301_PAGE, 7, 7),
	/* GEN */
	[F_GLOBAL_EN]           = REG_FIELD(SX1301_GEN,  3, 3),
	/* CKEN */
	[F_CLK32M_EN]           = REG_FIELD(SX1301_CKEN, 0, 0),
	/* RADIO_CFG */
	[F_RADIO_A_EN]          = REG_FIELD(SX1301_RADIO_CFG, 0, 0),
	[F_RADIO_B_EN]          = REG_FIELD(SX1301_RADIO_CFG, 1, 1),
	[F_RADIO_RST]           = REG_FIELD(SX1301_RADIO_CFG, 2, 2),
	/* MCU_CTRL */
	[F_MCU_RST_0]           = REG_FIELD(SX1301_MCU_CTRL, 0, 0),
	[F_MCU_RST_1]           = REG_FIELD(SX1301_MCU_CTRL, 1, 1),
	[F_MCU_SELECT_MUX_0]    = REG_FIELD(SX1301_MCU_CTRL, 2, 2),
	[F_MCU_SELECT_MUX_1]    = REG_FIELD(SX1301_MCU_CTRL, 3, 3),
	/* FORCE_CTRL */
	[F_FORCE_HOST_RADIO_CTRL] = REG_FIELD(SX1301_FORCE_CTRL, 1, 1),
	[F_FORCE_HOST_FE_CTRL]    = REG_FIELD(SX1301_FORCE_CTRL, 2, 2),
	[F_FORCE_DEC_FILTER_GAIN] = REG_FIELD(SX1301_FORCE_CTRL, 3, 3),
	/* EMERGENCY_FORCE_HOST_CTRL */
	[F_EMERGENCY_FORCE_HOST_CTRL] =
		REG_FIELD(SX1301_EMERGENCY_FORCE_HOST_CTRL, 0, 0),

	/* RSSI_X_FILTER_ALPHA */
	[F_RSSI_BB_FILTER_ALPHA] = REG_FIELD(SX1301_RSSI_BB_FILTER_ALPHA, 0, 4),
	[F_RSSI_DEC_FILTER_ALPHA] = REG_FIELD(SX1301_RSSI_DEC_FILTER_ALPHA, 0, 4),
	[F_RSSI_CHANN_FILTER_ALPHA]	= REG_FIELD(SX1301_RSSI_CHANN_FILTER_ALPHA, 0, 4),

	/* RSSI_X_DEFAULT_VALUE */
	[F_RSSI_BB_DEFAULT_VALUE] = REG_FIELD(SX1301_RSSI_BB_DEFAULT_VALUE, 0, 7),
	[F_RSSI_DEC_DEFAULT_VALUE] = REG_FIELD(SX1301_RSSI_DEC_DEFAULT_VALUE, 0, 7),
	[F_RSSI_CHANN_DEFAULT_VALUE] = REG_FIELD(SX1301_RSSI_CHANN_DEFAULT_VALUE, 0, 7),

	/* GAIN_OFFSET */
	[F_DEC_GAIN_OFFSET]	= REG_FIELD(SX1301_GAIN_OFFSET, 0, 3),
	[F_CHAN_GAIN_OFFSET]	= REG_FIELD(SX1301_GAIN_OFFSET, 4, 7),

	/* TX_TRIG */
	[F_TX_TRIG_IMMEDIATE] = REG_FIELD(SX1301_TX_TRIG, 0, 0),
	[F_TX_TRIG_DELAYED] = REG_FIELD(SX1301_TX_TRIG, 1, 1),
	[F_TX_TRIG_GPS] = REG_FIELD(SX1301_TX_TRIG, 2, 2),

	[F_SNR_AVG_CST] = REG_FIELD(SX1301_MISC_CFG1, 4, 5),
	[F_FRAME_SYNCH_PEAK1_POS] = REG_FIELD(SX1301_FRAME_SYNCH, 0, 3),
	[F_FRAME_SYNCH_PEAK2_POS] = REG_FIELD(SX1301_FRAME_SYNCH, 4, 7),

	[F_MBWSSF_FRAME_SYNCH_PEAK1_POS] = REG_FIELD(SX1301_BHSYNCPOS, 0, 3),
	[F_MBWSSF_FRAME_SYNCH_PEAK2_POS] = REG_FIELD(SX1301_BHSYNCPOS, 4, 7),

	[F_ADJUST_MODEM_START_OFFSET_RDX4L] =
		REG_FIELD(SX1301_MODEM_START_RDX4L, 0, 7),  // 12 bits
	[F_ADJUST_MODEM_START_OFFSET_RDX4H] =
		REG_FIELD(SX1301_MODEM_START_RDX4H, 0, 3),
	[F_ADJUST_MODEM_START_OFFSET_SF12_RDX4L] =
		REG_FIELD(SX1301_MODEM_START_SF12_RDX4L, 0, 7), // 12 bits
	[F_ADJUST_MODEM_START_OFFSET_SF12_RDX4H] =
		REG_FIELD(SX1301_MODEM_START_SF12_RDX4H, 0, 3),
	[F_CORR_MAC_GAIN] = REG_FIELD(SX1301_CORR_CFG, 4, 6),

	[F_FSK_RSSI_LENGTH] = REG_FIELD(SX1301_FSK_CFG1, 3, 5),
	[F_FSK_RX_INVERT] = REG_FIELD(SX1301_FSK_CFG1, 6, 6),
	[F_FSK_PKT_MODE] = REG_FIELD(SX1301_FSK_CFG1, 7, 7),

	[F_FSK_MODEM_INVERT_IQ] = REG_FIELD(SX1301_IQCFG, 5, 5),

	[F_FSK_CRC_EN] = REG_FIELD(SX1301_FSK_CFG2, 3, 3),
	[F_FSK_DCFREE_ENC] = REG_FIELD(SX1301_FSK_CFG2, 4, 5),
	[F_FSK_ERROR_OSR_TOL] = REG_FIELD(SX1301_FSK_ERROR_OSR_TOL, 0, 4),
	[F_FSK_PKT_LENGTH] = REG_FIELD(SX1301_FSK_PKT_LENGTH, 0, 7),
	[F_FSK_PATTERN_TIMEOUT_CFGL] =
		REG_FIELD(SX1301_FSK_PATTERN_TIMEOUT_CFGL, 0, 7),  // 10 bits
	[F_FSK_PATTERN_TIMEOUT_CFGH] =
		REG_FIELD(SX1301_FSK_PATTERN_TIMEOUT_CFGH, 0, 1),

	[F_TX_START_DELAYL] = REG_FIELD(SX1301_TX_START_DELAYL, 0, 7), // 16 bit
	[F_TX_START_DELAYH] = REG_FIELD(SX1301_TX_START_DELAYH, 0, 7),

	[F_TX_SWAP_IQ] = REG_FIELD(SX1301_TX_CFG2, 7, 7),
	[F_TX_FRAME_SYNCH_PEAK1_POS] = REG_FIELD(SX1301_TX_FRAME_SYNCH, 0, 3),
	[F_TX_FRAME_SYNCH_PEAK2_POS] = REG_FIELD(SX1301_TX_FRAME_SYNCH, 4, 7),

	[F_FSK_TX_GAUSSIAN_SELECT_BT] = REG_FIELD(SX1301_FSK_TX, 1, 2),
};

struct sx1301_tx_gain_lut {
	unsigned int	dig_gain;
	unsigned int	pa_gain;
	unsigned int	dac_gain;
	unsigned int	mix_gain;
	int		rf_power; /* dBm measured at board connector */
};

struct sx1301_cal_table {
	unsigned int i[7];
	unsigned int q[7];
};

struct sx1301_priv {
	struct lora_dev_priv lora;
	struct device		*dev;
	struct clk		*clk32m;
	struct gpio_desc *rst_gpio;
	struct regmap		*regmap;
	struct regmap_field *regmap_fields[ARRAY_SIZE(sx1301_regmap_fields)];

	struct sk_buff *tx_skb;

	struct workqueue_struct *wq;
	struct work_struct tx_work;

	struct sx1301_cal_table cal_table[2];

	struct sx1301_tx_gain_lut tx_gain_lut[SX1301_TX_GAIN_LUT_MAX];
	u8 tx_gain_lut_size;
};

int __init sx130x_radio_init(void);
void __exit sx130x_radio_exit(void);
int sx130x_register_radio_devices(struct device *dev);
int devm_sx130x_register_radio_devices(struct device *dev);
void sx130x_unregister_radio_devices(struct device *dev);
bool sx130x_radio_devices_okay(struct device *dev);

#endif
